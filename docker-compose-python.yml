version: '3.8'

services:
  # Kafka with KRaft mode
  kafka:
    image: confluentinc/cp-kafka:8.0.0
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_HOST://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      CLUSTER_ID: "test-cluster-id"
    volumes:
      - kafka_data:/var/lib/kafka/data
    user: "0"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: agentic
      POSTGRES_USER: agentic
      POSTGRES_PASSWORD: agentic
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agentic"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Control Plane Service
  control-plane:
    build:
      context: ./services/control-plane-py
      dockerfile: Dockerfile
    container_name: control-plane
    ports:
      - "8001:8000"
    environment:
      - HOST=0.0.0.0
      - PORT=8000
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_CLIENT_ID=control-plane
      - KAFKA_GROUP_ID=control-plane-group
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./services/control-plane-py/policies:/app/policies:ro

  # Data Plane Service
  data-plane:
    build:
      context: ./services/data-plane-py
      dockerfile: Dockerfile
    container_name: data-plane
    ports:
      - "8002:8000"
    environment:
      - HOST=0.0.0.0
      - PORT=8000
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_CLIENT_ID=data-plane
      - KAFKA_GROUP_ID=data-plane-group
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      - DATABASE_URL=postgresql://agentic:agentic@postgres:5432/agentic
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy

  # Executor Service
  executor:
    build:
      context: ./services/executor_old-py
      dockerfile: Dockerfile
    container_name: executor
    ports:
      - "8003:8000"
    environment:
      - HOST=0.0.0.0
      - PORT=8000
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_CLIENT_ID=executor
      - KAFKA_GROUP_ID=executor-group
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
    depends_on:
      kafka:
        condition: service_healthy

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    depends_on:
      kafka:
        condition: service_healthy

volumes:
  postgres_data:
  kafka_data: 