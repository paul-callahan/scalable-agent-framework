syntax = "proto3";

package io.arl.proto.model;

import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

// ExecutionHeader contains common metadata for both TaskExecution and PlanExecution
message ExecutionHeader {
  // Unique identifier of the Plan or Task that created this execution
  string name = 1;
  
  // Unique identifier for this execution
  string exec_id = 2;
  
  // ID of the AgentGraph being executed
  string graph_id = 3;
  
  // ID of the AgentLifetime instance
  string lifetime_id = 4;
  
  // Tenant identifier for multi-tenancy
  string tenant_id = 5;
  
  // Execution attempt number (1-based)
  int32 attempt = 6;
  
  // Current iteration index within the graph
  int32 iteration_idx = 7;
  
  // ISO-8601 timestamp when execution was created
  string created_at = 8;
  
  // Current execution status
  ExecutionStatus status = 9;
  
  // ID of the edge that led to this execution (for tracking flow)
  string edge_taken = 10;
}

// Execution status enumeration
enum ExecutionStatus {
  EXECUTION_STATUS_UNSPECIFIED = 0;
  EXECUTION_STATUS_PENDING = 1;
  EXECUTION_STATUS_RUNNING = 2;
  EXECUTION_STATUS_SUCCEEDED = 3;
  EXECUTION_STATUS_FAILED = 4;
}


// PlanResult represents the output of a Plan execution
message PlanResult {
  // Upstream TaskResult objects that led to this plan decision
  repeated io.arl.proto.model.TaskResult upstream_tasks_results = 1;

  // Names of the next tasks to execute
  repeated string next_task_names = 2;

  // Optional error message if planning failed
  string error_message = 3;
}

// PlanExecution represents a single Plan execution with metadata
message PlanExecution {
  // Common execution metadata
  io.arl.proto.model.ExecutionHeader header = 1;

  // IDs of parent task executions
  repeated string parent_task_exec_ids = 2;

  // Plan-specific result data
  PlanResult result = 3;

  // Names of parent tasks
  repeated string parent_task_names = 4;
}

// PlanInput represents the input data for a Plan execution
message PlanInput {
  // Unique identifier for this input
  string input_id = 1;

  // Name of the plan to execute
  string plan_name = 2;

  // Task executions that provide input to this plan
  repeated io.arl.proto.model.TaskExecution task_executions = 3;
}

// TaskInput represents the input data for a Task execution
message TaskInput {
  // Unique identifier for this input
  string input_id = 1;

  // Name of the task to execute
  string task_name = 2;

  // Plan execution that provides input to this task
  io.arl.proto.model.PlanExecution plan_execution = 3;
}


// Message represents a large result stored externally.
message StoredData {
  // URI reference for large results stored externally
  string uri  = 1;
  // Optional metadata for the object.  size, type, etc
  map<string, string> metadata = 2;
}

// TaskResult represents the output of a Task execution
message TaskResult {
  // Unique identifier for the TaskResult
  string id = 1;

  // Result data - either inline or as external data
  oneof data {
    // Inline data for small results
    google.protobuf.Any inline_data = 2;

    // External data for large results stored externally
    StoredData external_data = 3;
  }

  // Optional error message if execution failed
  string error_message = 4;
}

// TaskExecution represents a single Task execution with metadata
message TaskExecution {
  // Common execution metadata
  io.arl.proto.model.ExecutionHeader header = 1;

  // Execution ID of the parent/upstream PlanExecution.exec_id
  string parent_plan_exec_id = 2;

  // Task-specific result data
  TaskResult result = 3;

  // Name from the parent/upstream PlanExecution.header.name
  string parent_plan_name = 4;
}