syntax = "proto3";

package agentic.plan;

import "common.proto";
import "task.proto";

// PlanResult represents the output of a Plan execution
message PlanResult {
  // Upstream TaskResult objects that led to this plan decision
  repeated agentic.task.TaskResult upstream_tasks_results = 1;
  
  // IDs of the next tasks to execute
  repeated string next_task_ids = 2;
  
  // Optional metadata for the plan execution
  map<string, string> metadata = 3;
  
  // Optional error message if planning failed
  string error_message = 4;
  
  // Planning confidence score (0.0 to 1.0)
  float confidence = 5;
}

// PlanExecution represents a single Plan execution with metadata
message PlanExecution {
  // Common execution metadata
  agentic.common.ExecutionHeader header = 1;
  
  // Plan-specific result data
  PlanResult result = 2;
  
  // Plan type identifier for routing and processing
  string plan_type = 3;
  
  // Input task result that triggered this plan
  string input_task_id = 4;
  
  // Plan-specific parameters (serialized as JSON)
  string parameters = 5;
}