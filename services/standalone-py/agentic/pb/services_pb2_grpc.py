# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import plan_pb2 as plan__pb2
from . import services_pb2 as services__pb2
from . import task_pb2 as task__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in services_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DataPlaneServiceStub(object):
    """DataPlaneService handles persistence of execution records
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PutTaskExecution = channel.unary_unary(
                '/agentic.services.DataPlaneService/PutTaskExecution',
                request_serializer=task__pb2.TaskExecution.SerializeToString,
                response_deserializer=services__pb2.Ack.FromString,
                _registered_method=True)
        self.PutPlanExecution = channel.unary_unary(
                '/agentic.services.DataPlaneService/PutPlanExecution',
                request_serializer=plan__pb2.PlanExecution.SerializeToString,
                response_deserializer=services__pb2.Ack.FromString,
                _registered_method=True)
        self.GetTaskExecution = channel.unary_unary(
                '/agentic.services.DataPlaneService/GetTaskExecution',
                request_serializer=services__pb2.GetTaskExecutionRequest.SerializeToString,
                response_deserializer=task__pb2.TaskExecution.FromString,
                _registered_method=True)
        self.GetPlanExecution = channel.unary_unary(
                '/agentic.services.DataPlaneService/GetPlanExecution',
                request_serializer=services__pb2.GetPlanExecutionRequest.SerializeToString,
                response_deserializer=plan__pb2.PlanExecution.FromString,
                _registered_method=True)


class DataPlaneServiceServicer(object):
    """DataPlaneService handles persistence of execution records
    """

    def PutTaskExecution(self, request, context):
        """Store a TaskExecution record
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PutPlanExecution(self, request, context):
        """Store a PlanExecution record
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskExecution(self, request, context):
        """Retrieve a TaskExecution by ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPlanExecution(self, request, context):
        """Retrieve a PlanExecution by ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataPlaneServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PutTaskExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.PutTaskExecution,
                    request_deserializer=task__pb2.TaskExecution.FromString,
                    response_serializer=services__pb2.Ack.SerializeToString,
            ),
            'PutPlanExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.PutPlanExecution,
                    request_deserializer=plan__pb2.PlanExecution.FromString,
                    response_serializer=services__pb2.Ack.SerializeToString,
            ),
            'GetTaskExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskExecution,
                    request_deserializer=services__pb2.GetTaskExecutionRequest.FromString,
                    response_serializer=task__pb2.TaskExecution.SerializeToString,
            ),
            'GetPlanExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPlanExecution,
                    request_deserializer=services__pb2.GetPlanExecutionRequest.FromString,
                    response_serializer=plan__pb2.PlanExecution.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'agentic.services.DataPlaneService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('agentic.services.DataPlaneService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DataPlaneService(object):
    """DataPlaneService handles persistence of execution records
    """

    @staticmethod
    def PutTaskExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agentic.services.DataPlaneService/PutTaskExecution',
            task__pb2.TaskExecution.SerializeToString,
            services__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PutPlanExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agentic.services.DataPlaneService/PutPlanExecution',
            plan__pb2.PlanExecution.SerializeToString,
            services__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTaskExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agentic.services.DataPlaneService/GetTaskExecution',
            services__pb2.GetTaskExecutionRequest.SerializeToString,
            task__pb2.TaskExecution.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPlanExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agentic.services.DataPlaneService/GetPlanExecution',
            services__pb2.GetPlanExecutionRequest.SerializeToString,
            plan__pb2.PlanExecution.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ControlPlaneServiceStub(object):
    """ControlPlaneService handles orchestration and routing
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EvaluateGuardrails = channel.unary_unary(
                '/agentic.services.ControlPlaneService/EvaluateGuardrails',
                request_serializer=services__pb2.GuardrailRequest.SerializeToString,
                response_deserializer=services__pb2.GuardrailResponse.FromString,
                _registered_method=True)
        self.RouteExecution = channel.unary_unary(
                '/agentic.services.ControlPlaneService/RouteExecution',
                request_serializer=services__pb2.RouteRequest.SerializeToString,
                response_deserializer=services__pb2.RouteResponse.FromString,
                _registered_method=True)
        self.GetExecutionStatus = channel.unary_unary(
                '/agentic.services.ControlPlaneService/GetExecutionStatus',
                request_serializer=services__pb2.StatusRequest.SerializeToString,
                response_deserializer=services__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.AbortExecution = channel.unary_unary(
                '/agentic.services.ControlPlaneService/AbortExecution',
                request_serializer=services__pb2.AbortRequest.SerializeToString,
                response_deserializer=services__pb2.Ack.FromString,
                _registered_method=True)


class ControlPlaneServiceServicer(object):
    """ControlPlaneService handles orchestration and routing
    """

    def EvaluateGuardrails(self, request, context):
        """Evaluate guardrails for an execution
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RouteExecution(self, request, context):
        """Route execution to appropriate queue
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExecutionStatus(self, request, context):
        """Get execution status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AbortExecution(self, request, context):
        """Abort an execution
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ControlPlaneServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EvaluateGuardrails': grpc.unary_unary_rpc_method_handler(
                    servicer.EvaluateGuardrails,
                    request_deserializer=services__pb2.GuardrailRequest.FromString,
                    response_serializer=services__pb2.GuardrailResponse.SerializeToString,
            ),
            'RouteExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.RouteExecution,
                    request_deserializer=services__pb2.RouteRequest.FromString,
                    response_serializer=services__pb2.RouteResponse.SerializeToString,
            ),
            'GetExecutionStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExecutionStatus,
                    request_deserializer=services__pb2.StatusRequest.FromString,
                    response_serializer=services__pb2.StatusResponse.SerializeToString,
            ),
            'AbortExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.AbortExecution,
                    request_deserializer=services__pb2.AbortRequest.FromString,
                    response_serializer=services__pb2.Ack.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'agentic.services.ControlPlaneService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('agentic.services.ControlPlaneService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ControlPlaneService(object):
    """ControlPlaneService handles orchestration and routing
    """

    @staticmethod
    def EvaluateGuardrails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agentic.services.ControlPlaneService/EvaluateGuardrails',
            services__pb2.GuardrailRequest.SerializeToString,
            services__pb2.GuardrailResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RouteExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agentic.services.ControlPlaneService/RouteExecution',
            services__pb2.RouteRequest.SerializeToString,
            services__pb2.RouteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetExecutionStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agentic.services.ControlPlaneService/GetExecutionStatus',
            services__pb2.StatusRequest.SerializeToString,
            services__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AbortExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agentic.services.ControlPlaneService/AbortExecution',
            services__pb2.AbortRequest.SerializeToString,
            services__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
